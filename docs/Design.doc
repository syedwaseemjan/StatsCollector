# StatisticsCollector Design Document.

## 1. List of all the libraries / packages you have used in your project.
	SQLAlchemy==1.0.13
		To handle interaction with the database.
	celery==3.1.23
		For background workers. Depends on RabbitMQ server. Will help in processing the input quickly depeding on the number of workers running.
	paramiko==2.1.1
		For SSH, uploading client.sh and Executing it.
	nose==1.3.7
		For running unit tests.
	mock==2.0.0
		For helping in mocking some of the objects like SMTP.

## 2. Architecture diagram.
	Please look at Architecture Diagram.png

## 3. Breakdown of the system into components.
	
	## Concept

		Server and client scripts are written for linux environment. As it was mentioned that input data could be in hundreds, I have preferred to use Celery Background Workers along with RabbitMQ. Explanation for both Celery and RabbitMq has been provided in Design document. As server script gets started, it reads the XML document which contains the information about the client to connect to, parses each client, inserts the information in Database(Everything except username and password) and enqueues it in RabbitMQ so that it can be processed by a celery background worker. We can increase/decrease the number of workers according to the load. 
		
		Server:

			Rabbitmq:

				This is the primary queue for ssh requests in client machines. 
			Celery:

				Workers fetch the ssh requests from Rabbitmq one by one and process it.
				THe whole process of actually logging into client machine, uploading client.sh, 
				executing it and running the response back also happens inside it. Paramiko is used
				for secure encrypted communication. 

			Sqlalchemy:

				Sqlachemy is responsible for all communication with database.

		Client:

			Client is very simple shell script. Its has only two commands. 
				
				$ grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'
					This one gives the percent cpu usage.
				
				$ free | grep Mem | awk '{print $3/$2 * 100.0}'
					This second one gives 
